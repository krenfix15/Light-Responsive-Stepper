/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/motorscreen_screen/MotorScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include "mxconstants.h"
#include "stm32f4xx_hal.h"
#include "main.h"


MotorScreenViewBase::MotorScreenViewBase() :
    buttonCallback(this, &MotorScreenViewBase::buttonCallbackHandler)
{

    __background.setPosition(0, 0, 240, 320);
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));

    bkg.setXY(0, 0);
    bkg.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));

    btnGoToMainScreen.setXY(0, 121);
    btnGoToMainScreen.setBitmaps(touchgfx::Bitmap(BITMAP_LFTBTN_ID), touchgfx::Bitmap(BITMAP_LFTBTNPRESSED_ID));
    btnGoToMainScreen.setAction(buttonCallback);

    sliderRPM.setXY(33, 277);
    sliderRPM.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_BACK_ID), touchgfx::Bitmap(BITMAP_DARK_SLIDER_HORIZONTAL_SMALL_INDICATORS_SLIDER_HORIZONTAL_SMALL_SQUARE_KNOB_ID));
    sliderRPM.setupHorizontalSlider(3, 7, 1, 0, 130);
    sliderRPM.setValueRange(0, 14);
    sliderRPM.setValue(0);

    tglBtnMotorFull.setXY(56, 59);
    tglBtnMotorFull.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_TOGGLEBARS_TOGGLE_LARGE_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_DARK_TOGGLEBARS_TOGGLE_LARGE_BUTTON_ON_ID));
    tglBtnMotorFull.setAction(buttonCallback);

    textArea1.setXY(63, 34);
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    textArea1.setLinespacing(0);
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID2));

    tglBtnMotorHalf.setXY(57, 141);
    tglBtnMotorHalf.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_TOGGLEBARS_TOGGLE_LARGE_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_DARK_TOGGLEBARS_TOGGLE_LARGE_BUTTON_ON_ID));
    tglBtnMotorHalf.setAction(buttonCallback);

    tglBtnMotorWave.setXY(57, 222);
    tglBtnMotorWave.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_TOGGLEBARS_TOGGLE_LARGE_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_DARK_TOGGLEBARS_TOGGLE_LARGE_BUTTON_ON_ID));
    tglBtnMotorWave.setAction(buttonCallback);

    textArea1_1.setXY(57, 197);
    textArea1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    textArea1_1.setLinespacing(0);
    textArea1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));

    textArea1_2.setXY(59, 116);
    textArea1_2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    textArea1_2.setLinespacing(0);
    textArea1_2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4));

    add(__background);
    add(bkg);
    add(btnGoToMainScreen);
    add(sliderRPM);
    add(tglBtnMotorFull);
    add(textArea1);
    add(tglBtnMotorHalf);
    add(tglBtnMotorWave);
    add(textArea1_1);
    add(textArea1_2);
}

void MotorScreenViewBase::setupScreen()
{

}

void MotorScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &btnGoToMainScreen)
    {
        //Interaction1
        //When btnGoToMainScreen clicked change screen to MainScreen
        //Go to MainScreen with screen transition towards West
        application().gotoMainScreenScreenSlideTransitionWest();
    }
    else if (&src == &tglBtnMotorFull)
    {
        //startMotorFullDrive
        //When tglBtnMotorFull clicked execute C++ code
        //Execute C++ code
        int i;
        while ((i++ < 5) && (sliderRPM.getValue() > 0))
        {
        /* Motor pas cu pas */
        	for(int i = 0; i<512; i++)
        	{
        		HAL_GPIO_WritePin(PHASE1_GPIO_Port,PHASE1_Pin, GPIO_PIN_SET);
        		HAL_GPIO_WritePin(PHASE2_GPIO_Port,PHASE2_Pin, GPIO_PIN_SET);
        		HAL_GPIO_WritePin(PHASE3_GPIO_Port,PHASE3_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE4_GPIO_Port,PHASE4_Pin, GPIO_PIN_RESET);
        
        		HAL_Delay(sliderRPM.getValue());
        
        		HAL_GPIO_WritePin(PHASE1_GPIO_Port,PHASE1_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE2_GPIO_Port,PHASE2_Pin, GPIO_PIN_SET);
        		HAL_GPIO_WritePin(PHASE3_GPIO_Port,PHASE3_Pin, GPIO_PIN_SET);
        		HAL_GPIO_WritePin(PHASE4_GPIO_Port,PHASE4_Pin, GPIO_PIN_RESET);
        
        		HAL_Delay(sliderRPM.getValue());
        	
        		HAL_GPIO_WritePin(PHASE1_GPIO_Port,PHASE1_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE2_GPIO_Port,PHASE2_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE3_GPIO_Port,PHASE3_Pin, GPIO_PIN_SET);
        		HAL_GPIO_WritePin(PHASE4_GPIO_Port,PHASE4_Pin, GPIO_PIN_SET);
        
        		HAL_Delay(sliderRPM.getValue());
        
        		HAL_GPIO_WritePin(PHASE1_GPIO_Port,PHASE1_Pin, GPIO_PIN_SET);
        		HAL_GPIO_WritePin(PHASE2_GPIO_Port,PHASE2_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE3_GPIO_Port,PHASE3_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE4_GPIO_Port,PHASE4_Pin, GPIO_PIN_SET);
        
        		HAL_Delay(sliderRPM.getValue());
        	}
        HAL_Delay(1000);
        }
        tglBtnMotorFull.forceState(false);
    }
    else if (&src == &tglBtnMotorHalf)
    {
        //startMotorHalf
        //When tglBtnMotorHalf clicked execute C++ code
        //Execute C++ code
        int i;
        while ((i++ < 5) && (sliderRPM.getValue() > 0))
        {
        /* Motor pas cu pas */
        	for(int i = 0; i<512; i++)
        	{
        		HAL_GPIO_WritePin(PHASE1_GPIO_Port,PHASE1_Pin, GPIO_PIN_SET);
        		HAL_GPIO_WritePin(PHASE2_GPIO_Port,PHASE2_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE3_GPIO_Port,PHASE3_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE4_GPIO_Port,PHASE4_Pin, GPIO_PIN_RESET);
        
        		HAL_Delay(sliderRPM.getValue());
        
        		HAL_GPIO_WritePin(PHASE1_GPIO_Port,PHASE1_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE2_GPIO_Port,PHASE2_Pin, GPIO_PIN_SET);
        		HAL_GPIO_WritePin(PHASE3_GPIO_Port,PHASE3_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE4_GPIO_Port,PHASE4_Pin, GPIO_PIN_RESET);
        
        		HAL_Delay(sliderRPM.getValue());
        
        		HAL_GPIO_WritePin(PHASE1_GPIO_Port,PHASE1_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE2_GPIO_Port,PHASE2_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE3_GPIO_Port,PHASE3_Pin, GPIO_PIN_SET);
        		HAL_GPIO_WritePin(PHASE4_GPIO_Port,PHASE4_Pin, GPIO_PIN_RESET);
        
        		HAL_Delay(sliderRPM.getValue());
        
        		HAL_GPIO_WritePin(PHASE1_GPIO_Port,PHASE1_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE2_GPIO_Port,PHASE2_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE3_GPIO_Port,PHASE3_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE4_GPIO_Port,PHASE4_Pin, GPIO_PIN_SET);
        
        		HAL_Delay(sliderRPM.getValue());
        	}
        	
        	HAL_Delay(1000);
        
        	for(int i = 0; i<512; i++)
        	{
        		HAL_GPIO_WritePin(PHASE1_GPIO_Port,PHASE1_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE2_GPIO_Port,PHASE2_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE3_GPIO_Port,PHASE3_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE4_GPIO_Port,PHASE4_Pin, GPIO_PIN_SET);
        
        		HAL_Delay(sliderRPM.getValue());
        
        		HAL_GPIO_WritePin(PHASE1_GPIO_Port,PHASE1_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE2_GPIO_Port,PHASE2_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE3_GPIO_Port,PHASE3_Pin, GPIO_PIN_SET);
        		HAL_GPIO_WritePin(PHASE4_GPIO_Port,PHASE4_Pin, GPIO_PIN_RESET);
        
        		HAL_Delay(sliderRPM.getValue());
        
        		HAL_GPIO_WritePin(PHASE1_GPIO_Port,PHASE1_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE2_GPIO_Port,PHASE2_Pin, GPIO_PIN_SET);
        		HAL_GPIO_WritePin(PHASE3_GPIO_Port,PHASE3_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE4_GPIO_Port,PHASE4_Pin, GPIO_PIN_RESET);
        
        		HAL_Delay(sliderRPM.getValue());
        
        		HAL_GPIO_WritePin(PHASE1_GPIO_Port,PHASE1_Pin, GPIO_PIN_SET);
        		HAL_GPIO_WritePin(PHASE2_GPIO_Port,PHASE2_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE3_GPIO_Port,PHASE3_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE4_GPIO_Port,PHASE4_Pin, GPIO_PIN_RESET);
        
        		HAL_Delay(sliderRPM.getValue());
        	}
        	HAL_Delay(1000);
        }
        tglBtnMotorHalf.forceState(false);
    }
    else if (&src == &tglBtnMotorWave)
    {
        //startMotorWaveDrive
        //When tglBtnMotorWave clicked execute C++ code
        //Execute C++ code
        int i;
        while ((i++ < 5) && (sliderRPM.getValue() > 0))
        {
        /* Motor pas cu pas */
        	for(int i = 0; i < 512; i++)
        	{
        		HAL_GPIO_WritePin(PHASE1_GPIO_Port,PHASE1_Pin, GPIO_PIN_SET);
        		HAL_GPIO_WritePin(PHASE2_GPIO_Port,PHASE2_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE3_GPIO_Port,PHASE3_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE4_GPIO_Port,PHASE4_Pin, GPIO_PIN_RESET);
        
        		HAL_Delay(sliderRPM.getValue());
        
        		HAL_GPIO_WritePin(PHASE1_GPIO_Port,PHASE1_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE2_GPIO_Port,PHASE2_Pin, GPIO_PIN_SET);
        		HAL_GPIO_WritePin(PHASE3_GPIO_Port,PHASE3_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE4_GPIO_Port,PHASE4_Pin, GPIO_PIN_RESET);
        
        		HAL_Delay(sliderRPM.getValue());
        
        		HAL_GPIO_WritePin(PHASE1_GPIO_Port,PHASE1_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE2_GPIO_Port,PHASE2_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE3_GPIO_Port,PHASE3_Pin, GPIO_PIN_SET);
        		HAL_GPIO_WritePin(PHASE4_GPIO_Port,PHASE4_Pin, GPIO_PIN_RESET);
        
        		HAL_Delay(sliderRPM.getValue());
        
        		HAL_GPIO_WritePin(PHASE1_GPIO_Port,PHASE1_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE2_GPIO_Port,PHASE2_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE3_GPIO_Port,PHASE3_Pin, GPIO_PIN_RESET);
        		HAL_GPIO_WritePin(PHASE4_GPIO_Port,PHASE4_Pin, GPIO_PIN_SET);
        
        		HAL_Delay(sliderRPM.getValue());
        	}
        	HAL_Delay(1000);
        }
        tglBtnMotorWave.forceState(false);
    }
}
